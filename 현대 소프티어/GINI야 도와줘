/* https://softeer.ai/practice/6271 */
import java.io.*;
import java.util.*;

public class Main {

    static final int[] DX = {0,-1,0,1}; //동 북 서 남
    static final int[] DY = {1,0,-1,0};

    int N, M;
    char[][] map;
    Point home;
    Point cur;
    List<Point> rains;
    int ans;

    public static void main(String[] args) {
        new Main().solution();
    }

    public void solution() {
        input();
        solve();
    }


    public void input() {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            String[] N_M = br.readLine().split(" ");
            N = Integer.parseInt(N_M[0]);
            M = Integer.parseInt(N_M[1]);
            map = new char[N][M];
            rains = new ArrayList<>();
            for(int i=0; i<N; i++) {
                String s = br.readLine();
                for(int j=0; j<M; j++) {
                    map[i][j] = s.charAt(j);
                    if(map[i][j] == 'W') {
                        cur = new Point(i, j);
                        map[i][j] = '.';
                    }
                    if(map[i][j] == 'H') home = new Point(i, j);
                    if(map[i][j] == '*') rains.add(new Point(i, j));
                }
            }
            ans = Integer.MAX_VALUE;
        } catch (Exception e) {
            System.out.println("INPUT ERROR!!!!!!");
            throw new RuntimeException(e);
        }
    }

    public void solve() {
        bfs();
        if(ans == Integer.MAX_VALUE) {
            System.out.println("FAIL");
        } else {
            System.out.println(ans);
        }
    }

    public void bfs() {
        Queue<Point> rainQ = new LinkedList<>();
        Queue<Point> carQ = new LinkedList<>();

        boolean[][] vis = new boolean[N][M];

        for(Point rain : rains) {
            rainQ.add(rain);
        }
        carQ.add(cur);
        vis[cur.x][cur.y] = true;

        int cnt = 0;
        while(!carQ.isEmpty() || !rainQ.isEmpty()) {
            int size = rainQ.size();
            for(int i=0; i<size; i++) {
                Point popped = rainQ.poll();
                for(int dir=0; dir<4; dir++) {
                    int nx = popped.x + DX[dir];
                    int ny = popped.y + DY[dir];
                    if(!isInner(nx, ny)) continue;
                    if(map[nx][ny] != '.') continue;
                    map[nx][ny] = '*';
                    rainQ.add(new Point(nx, ny));
                }
            }
            size = carQ.size();
            for(int i=0; i<size; i++) {
                Point popped = carQ.poll();
                for(int dir=0; dir<4; dir++) {
                    int nx = popped.x + DX[dir];
                    int ny = popped.y + DY[dir];
                    if(!isInner(nx, ny)) continue;
                    if(map[nx][ny] == '*' || map[nx][ny] == 'X') continue;
                    if(vis[nx][ny]) continue;
                    if(map[nx][ny] == 'H') ans = Math.min(ans, cnt + 1);
                    carQ.add(new Point(nx, ny));
                    vis[nx][ny] = true;
                }
            }
            cnt++;
        }
    }

    private boolean isInner(int x, int y) {
        return 0<=x && 0<=y && x<N && y<M;
    }

}

class Point {
    int x, y;
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
