/* https://softeer.ai/practice/6252 */
import java.io.*;
import java.util.*;

public class Main {

    int N;
    long B;
    long[] arr;
    long min, max;
    long answer;

    public static void main(String[] args) {
        new Main().solution();
    }

    public void solution() {
        input();
        solve();
    }


    public void input() {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            String[] N_B = br.readLine().split(" ");
            N = Integer.parseInt(N_B[0]);
            B = Long.parseLong(N_B[1]);
            arr = Arrays.stream(br.readLine().split(" ")).mapToLong(Long::parseLong).toArray();
            Arrays.sort(arr);
            min = arr[0];
            max = arr[N - 1] + (long) Math.sqrt(B);
            answer = 0;
        } catch (Exception e) {
            System.out.println("INPUT ERROR!!!!!!");
            throw new RuntimeException(e);
        }
    }

    public void solve() {
        System.out.println(bSearch());
    }

    public long bSearch() {
        long st = min;
        long en = max;

        while(st < en) {
            long mid = (st + en) / 2L;
            if(isEnableUpgrade(mid)) {
                st = mid + 1;
                answer = Math.max(answer, mid);
            } else {
                en = mid;
            }
        }
        return answer;

    }

    public boolean isEnableUpgrade(long min) {
        long cost = 0L;
        for(long a : arr) {
            if(a >= min) continue;
            cost += (a - min) * (a - min);
            if(cost > B) return false;
        }
        return true;
    }
}
