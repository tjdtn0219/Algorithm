//https://softeer.ai/practice/6256

import java.io.*;
import java.util.*;

public class Main {

    static final int MAX_T = 1_000_000_001;

    Queue<Car>[] q;
    int N;
    int[] answer;

    public static void main(String[] args) {
        new Main().solution();
    }

    public void solution() {
        input();
        solve();
    }


    public void input() {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            N = Integer.parseInt(br.readLine());

            q = new Queue[4];
            for(int i=0; i<4; i++) {
                q[i] = new LinkedList<>();
            }

            for(int i=0; i<N; i++) {
                String[] tmp = br.readLine().split(" ");
                int t = Integer.parseInt(tmp[0]);
                int loc = tmp[1].charAt(0) - 'A';
                q[loc].add(new Car(i, t));
            }
            answer = new int[N];
            Arrays.fill(answer, -1);
        } catch (Exception e) {
            System.out.println("INPUT ERROR!!!!!!");
            throw new RuntimeException(e);
        }
    }

    public void solve() {

        int curT = -1;
    
        while(!isQEmpty()) {
            int minT = MAX_T;
            int[] state = new int[4];
            for(int i=0; i<4; i++) {
                if(!q[i].isEmpty()){
                    int t = q[i].peek().t;
                    minT = Math.min(t, minT);
                    if(t <= curT)
                        state[i] = 1;
                }
            }

            int cnt = 0;
            for(int val : state)
                cnt += val;
            
            if(cnt == 0) {
                // 다음 시간으로 점프
                curT = minT;
            } else if(cnt == 4)
            	// 교착상태
                break;
            else{
                for(int i = 0; i < 4; ++i) {
                    if(isEnableToGo(state, i)) {
                        answer[q[i].poll().idx] = curT;
                    }
                }
                curT += 1;
            }

        }
        printAnswer();
        
    }

    public boolean isEnableToGo(int[] state, int i) {
        return state[i] == 1 && state[(i+3) % 4] == 0;
    }

    public boolean isQEmpty() {
        if(q[0].isEmpty() && q[1].isEmpty()
        && q[2].isEmpty() && q[3].isEmpty() 
        ) {
            return true;
        }
        return false;
    }

    public void printAnswer() {
        StringBuilder sb = new StringBuilder();
        for(int t : answer) {
            sb.append(t).append("\n");
        }
        System.out.println(sb);
    }
}

class Car {

    int idx;
    int t;

    public Car(int idx, int t) {
        this.idx = idx;
        this.t = t;
    }
}
